local opts = {
    redirect_uri_path = "/redirect_uri",
    accept_none_alg = true,
    discovery = "http://keycloak:8080/auth/realms/${KEYCLOAK_REALM_NAME}/.well-known/openid-configuration",
    client_id = "openresty",
    client_secret = "1f24a8e1-6a3d-4003-818c-ce6ad8c91c23",
    redirect_uri_scheme = "https",
    logout_path = "/logout",
    redirect_after_logout_uri = "http://keycloak:8080/auth/realms/${KEYCLOAK_REALM_NAME}/protocol/openid-connect/logout?redirect_uri=/",
    redirect_after_logout_with_id_token_hint = false,
    scope = "openid",
    --session_contents = {id_token=true, access_token=true}
  }
  -- call introspect for OAuth 2.0 Bearer Access Token validation
  local res, err, _, session = require("resty.openidc").authenticate(opts)
  if err then
    ngx.status = 403
    ngx.say(err)
    ngx.exit(ngx.HTTP_FORBIDDEN)
  end
  ngx.req.set_header("Authorization", "Bearer " .. tostring(res.access_token))
  local cjson = require "cjson"
  --ngx.req.set_header("Id-Token", session.data.enc_id_token)
  ngx.header["Set-Cookie"] = "jwt=" .. res.access_token .. "; secure;path=/"
  ngx.header["Set-Cookie"] = "refresh_token=" .. session.data.refresh_token .. "; secure; path=/"
  --ngx.req.set_header("id_token", cjson.encode(res.id_token))
